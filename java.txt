public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!"); // 화면에 "Hello, World!" 출력
    }
}

/*

코드 설명:
public class HelloWorld: 프로그램 이름. 파일 이름과 동일해야 함.
public static void main(String[] args): 프로그램의 시작점.
System.out.println: 화면에 텍스트 출력.
실행 방법:
파일 저장: HelloWorld.java
컴파일: javac HelloWorld.java
실행: java HelloWorld

*/


import java.util.Scanner; // Scanner 클래스 임포트

public class UserInputExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); // Scanner 객체 생성

        System.out.print("이름을 입력하세요: ");
        String name = scanner.nextLine(); // 문자열 입력 받기

        System.out.print("나이를 입력하세요: ");
        int age = scanner.nextInt(); // 정수 입력 받기

        System.out.println("안녕하세요, " + name + "님. 당신의 나이는 " + age + "살입니다.");
        
        scanner.close(); // Scanner 객체 닫기
    }
}


/*

주요 메소드:
nextLine(): 한 줄의 문자열 입력.
nextInt(): 정수 입력.
nextDouble(): 실수 입력.
1.2. 파일 입력과 출력
Java에서는 파일에서 데이터를 읽거나 파일에 데이터를 쓸 때 File 클래스와 FileWriter/Scanner를 사용할 수 있어요.

파일에 쓰기:

*/

import java.io.FileWriter;
import java.io.IOException;

public class FileWriteExample {
    public static void main(String[] args) {
        try {
            FileWriter writer = new FileWriter("example.txt");
            writer.write("Java 파일 출력 예제입니다.");
            writer.close();
            System.out.println("파일에 쓰기 완료!");
        } catch (IOException e) {
            System.out.println("파일 처리 중 오류 발생: " + e.getMessage());
        }
    }
}


/*

파일읽기

*/


import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class FileReadExample {
    public static void main(String[] args) {
        try {
            File file = new File("example.txt");
            Scanner scanner = new Scanner(file);

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                System.out.println(line);
            }

            scanner.close();
        } catch (FileNotFoundException e) {
            System.out.println("파일을 찾을 수 없습니다: " + e.getMessage());
        }
    }
}


/*

2. 메소드와 클래스
2.1. 메소드 정의
메소드는 코드를 재사용하기 위한 기능으로, 특정 작업을 수행하도록 설계된 코드 블록이에요.

메소드 예제:

*/

public class MethodExample {
    public static void main(String[] args) {
        int result = add(5, 10); // 메소드 호출
        System.out.println("결과: " + result);
    }

    // 메소드 정의
    public static int add(int a, int b) {
        return a + b; // 두 수의 합 반환
    }
}


/*

2.2. 클래스와 객체
Java의 객체 지향 프로그래밍의 핵심인 클래스와 객체를 이해해야 해요.

클래스 정의:

*/

public class Person {
    // 속성 (필드)
    String name;
    int age;

    // 생성자
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // 메소드
    public void introduce() {
        System.out.println("안녕하세요, 제 이름은 " + name + "이고, 나이는 " + age + "살입니다.");
    }
}


//객체 생성 및 사용:

public class Main {
    public static void main(String[] args) {
        Person person = new Person("민우", 28); // 객체 생성
        person.introduce(); // 메소드 호출
    }
}
